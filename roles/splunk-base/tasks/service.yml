---
- name: Accept Splunk EULA
  shell: "{{ splunk_base }}/bin/splunk start --accept-license --no-prompt creates={{ splunk_base }}/etc/users/splunk-system-user"
  become_user: splunk
  changed_when: False
  when: splunk_version_check is succeeded
  notify: restart splunk

- name: Setup Splunk to start at boot with splunk user
  shell: "{{ splunk_base }}/bin/splunk enable boot-start -user splunk creates=/etc/init.d/splunk"
  when: splunk_installed is succeeded
  notify: restart splunk

- name: Copy Splunk init for service
  template:
    src: splunk.init.j2
    dest: /etc/init.d/splunk
    mode: '0755'
  notify: reload systemd

- name: Splunk is running
  shell: "{{ splunk_base }}/bin/splunk status"
  register: splunk_running
  changed_when: False
  check_mode: no
  ignore_errors: True
  when: splunk_path.stat.exists

# These configs require splunk to have generated the appropriate files
- name: Return hash value for admin password
  shell: "python3 -c \"import crypt; print(crypt.crypt('{{ stage.splunk_current_admin_password }}','$(grep admin {{ splunk_base }}/etc/passwd |awk '{print \"$6$\" $5 \"$\"}' FS=[:$])'))\""
  register: splunk_hashed_password
  become_user: splunk
  check_mode: no
  changed_when: False
  ignore_errors: True
  no_log: true

- name: Check passwd file contains current admin hash value
  shell: "echo $(grep '{{ splunk_hashed_password.stdout }}' {{ splunk_base }}/etc/passwd)"
  register: hash_check
  changed_when: False
  ignore_errors: True
  no_log: true

- name: Reset Splunk admin password if changed
  shell: "{{ splunk_base }}/bin/splunk edit user admin -password '{{ stage.splunk_old_admin_password }}' -role admin -auth admin:{{ stage.splunk_current_admin_password }}"
  become_user: splunk
  ignore_errors: True
  when: hash_check.stdout == ""
  no_log: true

- name: Check server.conf file contains current sslPassword hash value
  shell: "echo $(grep '{{ stage.ssl.splunk_cluster_sslPassword | hash('sha256') }}' {{ splunk_base }}/etc/system/local/server.conf)"
  register: sslPassword_hash_check
  changed_when: False
  ignore_errors: True
  no_log: true

- name: Set hash comment using splunk_cluster_sslPassword
  ini_file:
    path: "{{ splunk_base }}/etc/system/local/server.conf"
    section: sslConfig
    option: "#hashCheck"
    value: "{{ stage.ssl.splunk_cluster_sslPassword | hash('sha256') }}"
  ignore_errors: True
  when: use_internal_ca|default(False) and not bundle_check is skipped and sslPassword_hash_check.stdout == ""
  no_log: true

- name: Set sslPassword using splunk_cluster_sslPassword
  lineinfile:
    path: "{{ splunk_base }}/etc/system/local/server.conf"
    line: "sslPassword = {{ stage.ssl.splunk_cluster_sslPassword }}"
    regexp: '^sslPassword = '
    state: present
  ignore_errors: True
  when: use_internal_ca|default(False) and not bundle_check is skipped and sslPassword_hash_check.stdout == ""
  no_log: true

- name: Add serverCert to system/local server.conf
  ini_file:
    path: "{{ splunk_base }}/etc/system/local/server.conf"
    section: sslConfig
    option: serverCert
    value: "{{ stage.ssl.splunk_serverCert | regex_replace('(XXXHOSTCERTXXX)', ansible_hostname + '-cert-bundle.pem') }}"
  when: use_internal_ca|default(False) and not bundle_check is skipped
  no_log: true

- name: Add sslRootCAPath to system/local server.conf
  ini_file:
    path: "{{ splunk_base }}/etc/system/local/server.conf"
    section: sslConfig
    option: sslRootCAPath
    value: "{{ stage.ssl.splunk_sslRootCAPath }}"
  when: use_internal_ca|default(False) and not bundle_check is skipped
  no_log: true

- name: Add nodes to license master
  ini_file:
    path: "{{ splunk_base }}/etc/system/local/server.conf"
    section: license
    option: master_uri
    value: "https://{{ stage.splunk_lm_uri }}"
  when:
    - "'splunk-staging-lm' not in group_names"
  no_log: true
