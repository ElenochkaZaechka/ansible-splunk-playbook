---
- name: Accept Splunk license
  shell: "{{ splunk_uf_base }}/bin/splunk start --accept-license --no-prompt creates={{ splunk_uf_base }}/var/lib/splunk"
  become_user: splunk
  changed_when: False
  when: splunk_uf_version_check is succeeded
  notify: "{{ notify_task }}"

- name: Setup Splunk to start at boot with splunk user
  shell: "{{ splunk_uf_base }}/bin/splunk enable boot-start -user splunk creates={{ service_file }}"
  when: splunk_installed is succeeded
  notify: "{{ notify_task }}"

- name: Copy Splunk startup file for service
  template:
    src: "{{ tpl_src }}"
    dest: "{{ tpl_dest }}"
    mode: '0755'
  notify: "{{ notify_task }}"

- name: Splunk is running
  shell: "{{ splunk_uf_base }}/bin/splunk status"
  register: splunk_running
  changed_when: False
  check_mode: no
  ignore_errors: True
  when: splunk_path.stat.exists or splunk_installed is succeeded

- debug:
    msg: "Start service if SplunkForwarder not running"
  changed_when: True
  when: splunk_running.stdout == "splunkd is not running."
  notify: "{{ notify_task }}"

- name: return hash value for admin password
  shell: "python3 -c \"import crypt; print(crypt.crypt('{{ stage.splunk_current_admin_password }}','$(grep admin {{ splunk_uf_base }}/etc/passwd |awk '{print \"$6$\" $5 \"$\"}' FS=[:$])'))\""
  register: splunk_hashed_password
  become_user: splunk
  check_mode: no
  changed_when: False
  ignore_errors: True
  no_log: true

- name: Check passwd file contains current admin hash value
  shell: "echo $(grep '{{ splunk_hashed_password.stdout }}' {{ splunk_uf_base }}/etc/passwd)"
  register: hash_check
  changed_when: False
  ignore_errors: True
  no_log: true

- name: Reset Splunk admin password if changed
  shell: "{{ splunk_uf_base }}/bin/splunk edit user admin -password '{{ stage.splunk_current_admin_password }}' -auth admin:'{{ stage.splunk_old_admin_password }}'"
  become_user: splunk
  ignore_errors: True
  when: hash_check.stdout == ""
  no_log: true

- name: Check server.conf file contains current sslPassword hash value
  shell: "echo $(grep '{{ stage.ssl.splunk_cluster_sslPassword | hash('sha256') }}' {{ splunk_uf_base }}/etc/system/local/server.conf)"
  register: sslPassword_hash_check
  changed_when: False
  ignore_errors: True
  no_log: true

- name: Set hash comment using splunk_cluster_sslPassword
  ini_file:
    path: "{{ splunk_uf_base }}/etc/system/local/server.conf"
    section: sslConfig
    option: "#hashCheck"
    value: "{{ stage.ssl.splunk_cluster_wildcard_sslPassword | hash('sha256') }}"
  ignore_errors: True
  when: use_internal_ca|default(False) and not wildcard_bundle_check is skipped and sslPassword_hash_check.stdout == ""
  no_log: true

- name: Set sslPassword using splunk_cluster_wildcard_sslPassword
  lineinfile:
    path: "{{ splunk_uf_base }}/etc/system/local/server.conf"
    line: "sslPassword = {{ stage.ssl.splunk_cluster_wildcard_sslPassword }}"
    regexp: '^sslPassword = '
    state: present
  ignore_errors: True
  when: use_internal_ca|default(False) and not wildcard_bundle_check is skipped and sslPassword_hash_check.stdout == ""
  notify: "{{ notify_task }}"
  no_log: true

- name: Add serverCert to system/local server.conf
  ini_file:
    path: "{{ splunk_uf_base }}/etc/system/local/server.conf"
    section: sslConfig
    option: serverCert
    value: "{{ stage.ssl.splunkforwarder_clientCert | regex_replace('(XXXHOSTCERTXXX)', 'wildcard-cert-bundle.pem') }}"
  when: use_internal_ca|default(False) and not wildcard_bundle_check is skipped

- name: Add sslRootCAPath to system/local server.conf
  ini_file:
    path: "{{ splunk_uf_base }}/etc/system/local/server.conf"
    section: sslConfig
    option: sslRootCAPath
    value: "{{ stage.ssl.splunkforwarder_sslRootCAPath }}"
  when: use_internal_ca|default(False) and not wildcard_bundle_check is skipped